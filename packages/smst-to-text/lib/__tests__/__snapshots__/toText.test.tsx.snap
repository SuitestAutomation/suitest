// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[` 1`] = `
"[31mâœ– [0mRun test[32mMy loooooooooo ooooo ooo oooooo ooooooo ooooooo ooooooo ooooo ooooo ng! test[0m until condition is met max 5x every 5s
  [31mâœ– [0mcondition: element [32mMy element[0m exists
    [31mâœ– [0mprop name prop name prop name prop name prop name ~ expected value expected value expected value expected value 
                                                          expected value                                              
                                                        â†’ expected value expected value expected value expected value 
                                                          expected value                                              
    [32mâœ” [0mJavaScript expression                              
      > someJS(); someJS(); someJS(); someJS();        
      > someJS(); someJS(); someJS();                  
      > someJS(); someJS(); someJS();                  
  [31mfail: [0mSubject does not exist a very loooo oooooo ooooo ooooooo oooooo oooooo oooong error message, possibly including
        \\"description\\" part for notStarterReason"
`;

exports[` 2`] = `
"[31mâœ– [0mRun test [32mMy not so loooooooooong! test[0m until condition is met max 5x every 5s
  [31mâœ– [0mcondition: element [32mMy element[0m exists
    [31mâœ– [0mprop name prop name prop name prop name prop name ~ expected value expected value expected value expected value 
                                                          expected value                                              
                                                        â†’ expected value expected value expected value expected value 
                                                          expected value                                              
    [32mâœ” [0mJavaScript expression                              
      > someJS(); someJS(); someJS(); someJS();        
      > someJS(); someJS(); someJS();                  
      > someJS(); someJS(); someJS();                  
  [31mfail: [0mSubject does not exist a very not so loooooooong error message, possibly including \\"description\\" part for
        notStarterReason"
`;

exports[` 3`] = `
"âœ– Run testMy loooooooooo ooooo ooo oooooo ooooooo ooooooo ooooooo ooooo ooooo ng! test until condition is met max 5x every 5s
  âœ– condition: element My element exists
    âœ– prop name prop name prop name prop name prop name ~ expected value expected value expected value expected value 
                                                          expected value                                              
                                                        â†’ expected value expected value expected value expected value 
                                                          expected value                                              
    âœ” JavaScript expression                              
      > someJS(); someJS(); someJS(); someJS();        
      > someJS(); someJS(); someJS();                  
      > someJS(); someJS(); someJS();                  
  fail: Subject does not exist a very loooo oooooo ooooo ooooooo oooooo oooooo oooong error message, possibly including
        \\"description\\" part for notStarterReason"
`;

exports[` 4`] = `
"âœ– Run test My not so loooooooooong! test until condition is met max 5x every 5s
  âœ– condition: element My element exists
    âœ– prop name prop name prop name prop name prop name ~ expected value expected value expected value expected value 
                                                          expected value                                              
                                                        â†’ expected value expected value expected value expected value 
                                                          expected value                                              
    âœ” JavaScript expression                              
      > someJS(); someJS(); someJS(); someJS();        
      > someJS(); someJS(); someJS();                  
      > someJS(); someJS(); someJS();                  
  fail: Subject does not exist a very not so loooooooong error message, possibly including \\"description\\" part for
        notStarterReason"
`;

exports[`AST renderers formatted text renderer should handle code blocks 1`] = `"> someJS();"`;

exports[`AST renderers formatted text renderer should handle code blocks 2`] = `
"> someJS(); someJS(); someJS(); someJS();
> someJS(); someJS(); someJS();
> someJS(); someJS(); someJS();"
`;

exports[`AST renderers formatted text renderer should handle props 1`] = `
"prop name = expected value
prop name  
  > someJS();"
`;

exports[`AST renderers formatted text renderer should handle props 2`] = `
"[31mâœ– [0mprop name prop name prop name prop name prop name ~ expected value expected value expected value expected value 
                                                      expected value                                              
                                                    â†’ expected value expected value expected value expected value 
                                                      expected value                                              
[32mâœ” [0mJavaScript expression                              
  > someJS(); someJS(); someJS(); someJS();        
  > someJS(); someJS(); someJS();                  
  > someJS(); someJS(); someJS();                  "
`;

exports[`AST renderers formatted text renderer should handle props 3`] = `
"test   short         
     â†’ long long long"
`;

exports[`AST renderers formatted text renderer should handle props 4`] = `
"Empty string     contains [EMPTY STRING]                                              
                 â†’        [EMPTY STRING]                                              
Empty number     >        0                                                           
                 â†’        NaN                                                         
Empty code block =        [36mlooooooooooooooo oooooooo ooooooo ooooo ooooo oooooooooo ooo[0m
                          [36mo oooo ng[0m (and some next text block)                        "
`;

exports[`AST renderers formatted text renderer should handle props 5`] = `
"[31mâœ– [0mrequest header name          = another header
[32mâœ” [0mrequest header some name     = another header
request header some loong name = another header
[31mâœ– [0mrequest header another name  = another header"
`;

exports[`AST renderers formatted text renderer should render condition 1`] = `"condition: element [32mMy element[0m exists"`;

exports[`AST renderers formatted text renderer should render condition 2`] = `
"[31mâœ– [0mcondition: element [32mMy element[0m exists
  [31mâœ– [0mprop name prop name prop name prop name prop name ~ expected value expected value expected value expected value 
                                                        expected value                                              
                                                      â†’ expected value expected value expected value expected value 
                                                        expected value                                              
  [32mâœ” [0mJavaScript expression                              
    > someJS(); someJS(); someJS(); someJS();        
    > someJS(); someJS(); someJS();                  
    > someJS(); someJS(); someJS();                  "
`;

exports[`AST renderers formatted text renderer should render results with different verbosity level 1`] = `
"Assert element [32mMy element[0m is visible
  docs: http://suite.st/docs/"
`;

exports[`AST renderers formatted text renderer should render results with different verbosity level 2`] = `
"[31mâœ– [0mRun test [32mMy test[0m until condition is met max 5x every 5s
  [31mfail: [0mCondition was not met"
`;

exports[`AST renderers formatted text renderer should render test line 1`] = `"Assert element [32mMy element[0m is visible"`;

exports[`AST renderers formatted text renderer should render test line 2`] = `
"Press [4mOK[0m, [4mLEFT[0m only if condition is met
  condition: element [32mMy element[0m exists"
`;

exports[`AST renderers formatted text renderer should render test line 3`] = `
"[34mÂ» [0mAssert element [32mMy element[0m is visible
  [34mexcluded: [0mTest line was not executed"
`;

exports[`AST renderers formatted text renderer should render test line results 1`] = `
"[31mâœ– [0mRun test [32mMy test[0m until condition is met max 5x every 5s
  [31mâœ– [0mcondition: element [32mMy element[0m exists
    [31mâœ– [0mprop name prop name prop name prop name prop name ~ expected value expected value expected value expected value 
                                                          expected value                                              
                                                        â†’ expected value expected value expected value expected value 
                                                          expected value                                              
    [32mâœ” [0mJavaScript expression                              
      > someJS(); someJS(); someJS(); someJS();        
      > someJS(); someJS(); someJS();                  
      > someJS(); someJS(); someJS();                  
  [31mfail: [0mCondition was not met"
`;

exports[`AST renderers formatted text renderer should render test line results 2`] = `
"[33mâ€¼ [0mAssert application has exited
  [33mwarning: [0mSome warning message"
`;

exports[`AST renderers formatted text renderer should render test line results 3`] = `
"[34mÂ» [0mAssert application has exited
  [34mexit: [0mCondition was met"
`;

exports[`AST renderers formatted text renderer should render test line results 4`] = `
"[34mÂ» [0mPress [4mOK[0m only if condition is met
  condition: element [32mMy element[0m exists
  [34mexcluded: [0mTest line was not executed"
`;

exports[`AST renderers formatted text renderer should render test line results 5`] = `
"[31mâœ– [0mAssert application has exited
  [31mfatal: [0mSome generic error message"
`;

exports[`AST renderers formatted text renderer should render test line results 6`] = `"[32mâœ” [0mAssert application has exited"`;

exports[`AST renderers formatted text renderer should render test line results 7`] = `
"[35mâ¦» [0mSleep 10s
  [35maborted: [0mExecution was aborted."
`;

exports[`AST renderers formatted text renderer should render test line results with screenshots 1`] = `
"[31mâœ– [0mRun test [32mMy test[0m until condition is met max 5x every 5s
  [31mâœ– [0mcondition: element [32mMy element[0m exists
    [31mâœ– [0mprop name prop name prop name prop name prop name ~ expected value expected value expected value expected value 
                                                          expected value                                              
                                                        â†’ expected value expected value expected value expected value 
                                                          expected value                                              
    [32mâœ” [0mJavaScript expression                              
      > someJS(); someJS(); someJS(); someJS();        
      > someJS(); someJS(); someJS();                  
      > someJS(); someJS(); someJS();                  
  [31mfail: [0mCondition was not met
  screenshot: path/to/screenshot.png"
`;

exports[`AST renderers formatted text renderer should render test line results with screenshots 2`] = `
"[33mâ€¼ [0mAssert application has exited
  [33mwarning: [0mSome warning message
  screenshot: path/to/screenshot.png"
`;

exports[`AST renderers formatted text renderer should render test line results with screenshots 3`] = `
"[34mÂ» [0mAssert application has exited
  [34mexit: [0mCondition was met
  screenshot: path/to/screenshot.png"
`;

exports[`AST renderers formatted text renderer should render test line results with screenshots 4`] = `
"[34mÂ» [0mPress [4mOK[0m only if condition is met
  condition: element [32mMy element[0m exists
  [34mexcluded: [0mTest line was not executed
  screenshot: path/to/screenshot.png"
`;

exports[`AST renderers formatted text renderer should render test line results with screenshots 5`] = `
"[31mâœ– [0mAssert application has exited
  [31mfatal: [0mSome generic error message
  screenshot: path/to/screenshot.png"
`;

exports[`AST renderers formatted text renderer should render test line results with screenshots 6`] = `
"[32mâœ” [0mAssert application has exited
  screenshot: path/to/screenshot.png"
`;

exports[`AST renderers formatted text renderer should render test line results with screenshots 7`] = `
"[35mâ¦» [0mSleep 10s
  [35maborted: [0mExecution was aborted."
`;

exports[`AST renderers formatted text renderer should render test line results with screenshots 8`] = `
"[31mâœ– [0mRun test [32mMy test[0m until condition is met max 5x every 5s
  [31mfail: [0mCondition was not met
  screenshot: path/to/screenshot.png"
`;

exports[`AST renderers formatted text renderer should render test line results with screenshots 9`] = `
"[33mâ€¼ [0mAssert application has exited
  [33mwarning: [0mSome warning message
  screenshot: path/to/screenshot.png"
`;

exports[`AST renderers formatted text renderer should render test line results with screenshots 10`] = `
"[34mÂ» [0mAssert application has exited
  [34mexit: [0mCondition was met
  screenshot: path/to/screenshot.png"
`;

exports[`AST renderers formatted text renderer should render test line results with screenshots 11`] = `
"[35mâ¦» [0mSleep 10s
  [35maborted: [0mExecution was aborted."
`;

exports[`AST renderers formatted text renderer should render test line results with screenshots 12`] = `
"[31mâœ– [0mRun test [32mMy test[0m until condition is met max 5x every 5s
  [31mâœ– [0mcondition: element [32mMy element[0m exists
    [31mâœ– [0mprop name prop name prop name prop name prop name ~ expected value expected value expected value expected value 
                                                          expected value                                              
                                                        â†’ expected value expected value expected value expected value 
                                                          expected value                                              
    [32mâœ” [0mJavaScript expression                              
      > someJS(); someJS(); someJS(); someJS();        
      > someJS(); someJS(); someJS();                  
      > someJS(); someJS(); someJS();                  
  [31mfail: [0mCondition was not met
  screenshot: path/to/screenshot.png"
`;

exports[`AST renderers formatted text renderer should render test line results with screenshots 13`] = `
"[33mâ€¼ [0mAssert application has exited
  [33mwarning: [0mSome warning message
  screenshot: path/to/screenshot.png"
`;

exports[`AST renderers formatted text renderer should render test line results with screenshots 14`] = `
"[34mÂ» [0mAssert application has exited
  [34mexit: [0mCondition was met
  screenshot: path/to/screenshot.png"
`;

exports[`AST renderers formatted text renderer should render test line results with screenshots 15`] = `
"[35mâ¦» [0mSleep 10s
  [35maborted: [0mExecution was aborted."
`;

exports[`AST renderers plain text renderer should handle code blocks 1`] = `"> someJS();"`;

exports[`AST renderers plain text renderer should handle code blocks 2`] = `
"> someJS(); someJS(); someJS(); someJS();
> someJS(); someJS(); someJS();
> someJS(); someJS(); someJS();"
`;

exports[`AST renderers plain text renderer should handle props 1`] = `
"prop name = expected value
prop name  
  > someJS();"
`;

exports[`AST renderers plain text renderer should handle props 2`] = `
"âœ– prop name prop name prop name prop name prop name ~ expected value expected value expected value expected value 
                                                      expected value                                              
                                                    â†’ expected value expected value expected value expected value 
                                                      expected value                                              
âœ” JavaScript expression                              
  > someJS(); someJS(); someJS(); someJS();        
  > someJS(); someJS(); someJS();                  
  > someJS(); someJS(); someJS();                  "
`;

exports[`AST renderers plain text renderer should handle props 3`] = `
"test   short         
     â†’ long long long"
`;

exports[`AST renderers plain text renderer should handle props 4`] = `
"Empty string     contains [EMPTY STRING]                                              
                 â†’        [EMPTY STRING]                                              
Empty number     >        0                                                           
                 â†’        NaN                                                         
Empty code block =        looooooooooooooo oooooooo ooooooo ooooo ooooo oooooooooo ooo
                          o oooo ng (and some next text block)                        "
`;

exports[`AST renderers plain text renderer should handle props 5`] = `
"âœ– request header name          = another header
âœ” request header some name     = another header
request header some loong name = another header
âœ– request header another name  = another header"
`;

exports[`AST renderers plain text renderer should render condition 1`] = `"condition: element My element exists"`;

exports[`AST renderers plain text renderer should render condition 2`] = `
"âœ– condition: element My element exists
  âœ– prop name prop name prop name prop name prop name ~ expected value expected value expected value expected value 
                                                        expected value                                              
                                                      â†’ expected value expected value expected value expected value 
                                                        expected value                                              
  âœ” JavaScript expression                              
    > someJS(); someJS(); someJS(); someJS();        
    > someJS(); someJS(); someJS();                  
    > someJS(); someJS(); someJS();                  "
`;

exports[`AST renderers plain text renderer should render results with different verbosity level 1`] = `
"Assert element My element is visible
  docs: http://suite.st/docs/"
`;

exports[`AST renderers plain text renderer should render results with different verbosity level 2`] = `
"âœ– Run test My test until condition is met max 5x every 5s
  fail: Condition was not met"
`;

exports[`AST renderers plain text renderer should render test line 1`] = `"Assert element My element is visible"`;

exports[`AST renderers plain text renderer should render test line 2`] = `
"Press OK, LEFT only if condition is met
  condition: element My element exists"
`;

exports[`AST renderers plain text renderer should render test line 3`] = `
"Â» Assert element My element is visible
  excluded: Test line was not executed"
`;

exports[`AST renderers plain text renderer should render test line results 1`] = `
"âœ– Run test My test until condition is met max 5x every 5s
  âœ– condition: element My element exists
    âœ– prop name prop name prop name prop name prop name ~ expected value expected value expected value expected value 
                                                          expected value                                              
                                                        â†’ expected value expected value expected value expected value 
                                                          expected value                                              
    âœ” JavaScript expression                              
      > someJS(); someJS(); someJS(); someJS();        
      > someJS(); someJS(); someJS();                  
      > someJS(); someJS(); someJS();                  
  fail: Condition was not met"
`;

exports[`AST renderers plain text renderer should render test line results 2`] = `
"â€¼ Assert application has exited
  warning: Some warning message"
`;

exports[`AST renderers plain text renderer should render test line results 3`] = `
"Â» Assert application has exited
  exit: Condition was met"
`;

exports[`AST renderers plain text renderer should render test line results 4`] = `
"Â» Press OK only if condition is met
  condition: element My element exists
  excluded: Test line was not executed"
`;

exports[`AST renderers plain text renderer should render test line results 5`] = `
"âœ– Assert application has exited
  fatal: Some generic error message"
`;

exports[`AST renderers plain text renderer should render test line results 6`] = `"âœ” Assert application has exited"`;

exports[`AST renderers plain text renderer should render test line results 7`] = `
"â¦» Sleep 10s
  aborted: Execution was aborted."
`;

exports[`AST renderers plain text renderer should render test line results with screenshots 1`] = `
"âœ– Run test My test until condition is met max 5x every 5s
  âœ– condition: element My element exists
    âœ– prop name prop name prop name prop name prop name ~ expected value expected value expected value expected value 
                                                          expected value                                              
                                                        â†’ expected value expected value expected value expected value 
                                                          expected value                                              
    âœ” JavaScript expression                              
      > someJS(); someJS(); someJS(); someJS();        
      > someJS(); someJS(); someJS();                  
      > someJS(); someJS(); someJS();                  
  fail: Condition was not met
  screenshot: path/to/screenshot.png"
`;

exports[`AST renderers plain text renderer should render test line results with screenshots 2`] = `
"â€¼ Assert application has exited
  warning: Some warning message
  screenshot: path/to/screenshot.png"
`;

exports[`AST renderers plain text renderer should render test line results with screenshots 3`] = `
"Â» Assert application has exited
  exit: Condition was met
  screenshot: path/to/screenshot.png"
`;

exports[`AST renderers plain text renderer should render test line results with screenshots 4`] = `
"Â» Press OK only if condition is met
  condition: element My element exists
  excluded: Test line was not executed
  screenshot: path/to/screenshot.png"
`;

exports[`AST renderers plain text renderer should render test line results with screenshots 5`] = `
"âœ– Assert application has exited
  fatal: Some generic error message
  screenshot: path/to/screenshot.png"
`;

exports[`AST renderers plain text renderer should render test line results with screenshots 6`] = `
"âœ” Assert application has exited
  screenshot: path/to/screenshot.png"
`;

exports[`AST renderers plain text renderer should render test line results with screenshots 7`] = `
"â¦» Sleep 10s
  aborted: Execution was aborted."
`;

exports[`AST renderers plain text renderer should render test line results with screenshots 8`] = `
"âœ– Run test My test until condition is met max 5x every 5s
  fail: Condition was not met
  screenshot: path/to/screenshot.png"
`;

exports[`AST renderers plain text renderer should render test line results with screenshots 9`] = `
"â€¼ Assert application has exited
  warning: Some warning message
  screenshot: path/to/screenshot.png"
`;

exports[`AST renderers plain text renderer should render test line results with screenshots 10`] = `
"Â» Assert application has exited
  exit: Condition was met
  screenshot: path/to/screenshot.png"
`;

exports[`AST renderers plain text renderer should render test line results with screenshots 11`] = `
"â¦» Sleep 10s
  aborted: Execution was aborted."
`;

exports[`AST renderers plain text renderer should render test line results with screenshots 12`] = `
"âœ– Run test My test until condition is met max 5x every 5s
  âœ– condition: element My element exists
    âœ– prop name prop name prop name prop name prop name ~ expected value expected value expected value expected value 
                                                          expected value                                              
                                                        â†’ expected value expected value expected value expected value 
                                                          expected value                                              
    âœ” JavaScript expression                              
      > someJS(); someJS(); someJS(); someJS();        
      > someJS(); someJS(); someJS();                  
      > someJS(); someJS(); someJS();                  
  fail: Condition was not met
  screenshot: path/to/screenshot.png"
`;

exports[`AST renderers plain text renderer should render test line results with screenshots 13`] = `
"â€¼ Assert application has exited
  warning: Some warning message
  screenshot: path/to/screenshot.png"
`;

exports[`AST renderers plain text renderer should render test line results with screenshots 14`] = `
"Â» Assert application has exited
  exit: Condition was met
  screenshot: path/to/screenshot.png"
`;

exports[`AST renderers plain text renderer should render test line results with screenshots 15`] = `
"â¦» Sleep 10s
  aborted: Execution was aborted."
`;
